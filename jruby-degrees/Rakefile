namespace :algorithms do
  desc 'Download Neo4j binaries for graph functions'
  task :download do
    sh <<HERE
curl -o neo4j.zip http://dist.neo4j.org/neo4j-1.2.M04-windows.zip
HERE
  end

  file 'neo4j-1.2.M04-windows.zip' => :download

  desc 'Extract Neo4j graph algorithms'
  task :extract => 'neo4j-1.2.M04-windows.zip' do
    sh <<HERE
unzip -j neo4j.zip neo4j-1.2.M04/lib/neo4j-graph-algo-0.7-1.2.M04.jar
HERE
  end
end

namespace :movies do
  desc 'Download movie data'
  task :download do
    sh <<HERE
curl -O http://download.freebase.com/datadumps\
/latest/browse/film/performance.tsv
HERE
  end

  file 'performance.tsv' => :download

  desc 'Import movie data into Neo4j'
  task :import => 'performance.tsv' do
    require 'neography'
    require 'enumerator'
    require 'cgi'

    module Finder
      def find_or_create(type, name)
        cgi = CGI.escape name
        hit = get_index type, cgi

        return hit.first if hit

        node = create_node 'name' => name
        add_to_index type, cgi, node
        node
      end
    end

    start = Time.now
    File.open('performance.tsv') do |f|
      print 'Importing (0% done, calculating remaining)'

      neo = Neography::Rest.new
      class << neo; include Finder end

      f.gets # header
      f.each_line do |line|
        _, _, actor_name, movie_name = line.split "\t"
        next if actor_name.empty? || movie_name.empty?

        actor = neo.find_or_create 'actor', actor_name
        movie = neo.find_or_create 'movie', movie_name
        neo.create_relationship 'acting', actor, movie

        complete  = f.pos.to_f / f.stat.size
        elapsed   = Time.now - start
        remaining = elapsed / complete - elapsed
        countdown = '%d:%02d' % [remaining / 60, remaining % 60]

        printf "\rImporting (%.02f%% done, %s remaining)      ",
          complete * 100,
          complete > 0.05 ? countdown : 'calculating'
      end

      puts
    end
  end
end
